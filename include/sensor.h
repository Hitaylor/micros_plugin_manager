#ifndef _H_SENSOR_H
#define _H_SENSOR_H

#include <iostream>
#include <new>      //used for the std::bad_alloc()
#include <string.h> //used for the memset()
#include <map>
#include "constParam.h" //use the LABEL_CONTENT_MAX_LENGTH param in the constructor

using namespace std;

/**
 * @brief Description of the sensor plugins. Each sensor plugin correspond to a Sensor object. A Sensor object describes: 
 *  (1)the path to the xxx sensor plugin, and the name, content and size of the data generated by the xxx sensor.
 *  (2)params to set to the sensor plugin to control the data generating process.
 * 
 */
class Sensor
{
    ///name or description of the sensor plugin
    std::string sensorName;
    ///full name (including the namespace) of the sensor plugin class derived from the @SensorPluginBase corresponding to the sensorName.
    std::string sensorPluginClassName;
    ///path to the sensor plugin (.so) file
    std::string sensorPluginPath;
    ///params of the sensor to set to control the data stream from the sensor hardware
    std::map<std::string, std::string> sensorParams;
    ///the maximum of the data length generated by the sensor. Used for malloc
    int maxSensorContentLength;
    ///pointer to the data length fetched from the sensor plugin
    int32_t * sensorContentLengthPtr;
    ///content of the data fetched from the sensor plugin
    void * sensorContent;

public:
    Sensor();
    Sensor(std::string aSensorName, std::string aSensorPluginPath, std::string aSensorPluginClassName, std::map<std::string, std::string> aSensorParams, int aMaxSensorContentLength);
    ~Sensor();

    std::string getSensorName() const;
    void setSensorName(std::string aSensorName);

    std::string getSensorPluginPath();
    void setSensorPluginPath(std::string aSensorPluginPath);

    std::string getSensorPluginClassName();
    void setSensorPluginClassName(std::string aSensorPluginClassName);

    std::map<std::string, std::string> getSensorParams();
    void setSensorParams(std::map<std::string, std::string> aSensorParams);

    int getMaxSensorContentLength() const;
    void setMaxSensorContentLength(const int aMaxSensorContentLength);

    int32_t *getSensorContentLengthPtr() const;
    void setSensorContentLengthPtr( int32_t * aSensorContentLengthPtr);

    int32_t getSensorContentLength() const;
    void setSensorContentLength(const int32_t aSensorContentLength);

    void *getSensorContent() const;
    void setSensorContent(void *aSensorContent);

    /// if using the default constructor (no params), the sensorContent will be null, so this function should be called to alloc memory for it.
    int allocMemForSensorContent();
    int allocMemForSensorContentLengthPtr();
};
#endif